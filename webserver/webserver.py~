from flask import Flask
from flask import render_template
import pymongo
from bson import json_util
import json
import logging

import json
import plotly
import pandas as pd
import numpy as np

#FLASK_DEBUG=1

coll = pymongo.MongoClient().saivasdata.gabrielraw

app = Flask(__name__)

@app.route('/')
def hello_world():
    return render_template('frontpage.html')
    #return 'Gabriel web server'

@app.route('/graphs')
def graphs():

    rng = pd.date_range('1/1/2011', periods=7500, freq='H')
    ts = pd.Series(np.random.randn(len(rng)), index=rng)

    graphs = [
        dict(
            data=[
                dict(
                    x=[1, 2, 3],
                    y=[10, 20, 30],
                    type='scatter'
                ),
            ],
            layout=dict(
                title='first graph'
            )
        ),

        dict(
            data=[
                dict(
                    x=[1, 3, 5],
                    y=[10, 50, 30],
                    type='bar'
                ),
            ],
            layout=dict(
                title='second graph'
            )
        ),

        dict(
            data=[
                dict(
                    x=ts.index,  # Can use the pandas data structures directly
                    y=ts
                )
            ]
        )
    ]

    # Add "ids" to each of the graphs to pass up to the client
    # for templating
    ids = ['graph-{}'.format(i) for i, _ in enumerate(graphs)]

    # Convert the figures to JSON
    # PlotlyJSONEncoder appropriately converts pandas, datetime, etc
    # objects to their JSON equivalents
    graphJSON = json.dumps(graphs, cls=plotly.utils.PlotlyJSONEncoder)

    return render_template('graphs.html',
                           ids=ids,
                           graphJSON=graphJSON)


@app.route('/count')
def count():
    return  'dives {}'.format(coll.find().count())

@app.route('/dives')
def dives():
    cdives = []
    # get all dives
    divecursor = coll.find().sort( 'startdatetime', pymongo.DESCENDING).limit(100)
    for dive in divecursor:
        cdives.append(dive)
    return render_template('listdives.html',dives=cdives)

@app.route('/dives/<diveid>/')
def onedive(diveid):

    searchid = int(diveid)
    dive = coll.find_one({"profilenumber": searchid })
    if dive != None:
        retstring = json.dumps(dive, default=json_util.default)
        return json.dumps(retstring) # 'dive number {}'.format(dive['_id'])
    else:
        return 'None '

if __name__ == "__main__":
    app.config['DEBUG'] = True
    app.run()
